{"version":3,"file":"static/js/312.de9e32b0.chunk.js","mappings":"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","sources":["components/DebouncedInput.tsx","pages/EmployeeList.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst DebouncedInput = ({\r\n  value: initialValue,\r\n  onChange,\r\n  debounce = 500,\r\n  ...props\r\n}: {\r\n  value: string | number;\r\n  onChange: (value: string | number) => void;\r\n  debounce?: number;\r\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, \"onChange\">) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      onChange(value);\r\n    }, debounce);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [debounce, onChange, value]);\r\n\r\n  return (\r\n    <input\r\n      {...props}\r\n      value={value}\r\n      onChange={(e) => setValue(e.target.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DebouncedInput;\r\n","import {\r\n  createColumnHelper,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n  SortingState,\r\n  getSortedRowModel,\r\n  FilterFn,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  ColumnDef,\r\n} from \"@tanstack/react-table\";\r\nimport React, { useState } from \"react\";\r\nimport DebouncedInput from \"../components/DebouncedInput\";\r\nimport { RankingInfo, rankItem } from \"@tanstack/match-sorter-utils\";\r\nimport { handleOpenNav } from \"../utils/handleOpenNav\";\r\nimport { newEmployeeInt } from \"../types/models\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\n\r\ndeclare module \"@tanstack/table-core\" {\r\n  interface FilterFns {\r\n    fuzzy: FilterFn<unknown>;\r\n  }\r\n  interface FilterMeta {\r\n    itemRank: RankingInfo;\r\n  }\r\n}\r\n\r\nconst fuzzyFilter: FilterFn<any> = (row, columnId, value, addMeta) => {\r\n  // Rank the item\r\n  const itemRank = rankItem(row.getValue(columnId), value);\r\n\r\n  // Store the itemRank info\r\n  addMeta({\r\n    itemRank,\r\n  });\r\n\r\n  // Return if the item should be filtered in/out\r\n  return itemRank.passed;\r\n};\r\n\r\nconst EmployeeList = () => {\r\n  const data = useAppSelector((state) => state.users.users);\r\n\r\n  const columnHelper = createColumnHelper<newEmployeeInt>();\r\n\r\n  const columns: ColumnDef<newEmployeeInt, any>[] = [\r\n    columnHelper.accessor((row) => row.firstName, {\r\n      id: \"firstName\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>First Name</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.lastName, {\r\n      id: \"lastName\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Last Name</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.startDay, {\r\n      id: \"startDay\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Start Day</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.departement, {\r\n      id: \"department\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Departement</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.birthday, {\r\n      id: \"birthday\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Birthday</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.street, {\r\n      id: \"street\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Street</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.city, {\r\n      id: \"city\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>City</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.state, {\r\n      id: \"state\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>State</span>,\r\n    }),\r\n    columnHelper.accessor((row) => row.zipCode, {\r\n      id: \"zipCode\",\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>Zip Code</span>,\r\n    }),\r\n  ];\r\n\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n  const openHeader = useAppSelector((state) => state.reponsive.openHeader);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    filterFns: {\r\n      fuzzy: fuzzyFilter,\r\n    },\r\n    state: {\r\n      sorting,\r\n      globalFilter,\r\n    },\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    globalFilterFn: fuzzyFilter,\r\n    onSortingChange: setSorting,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    debugTable: true,\r\n  });\r\n\r\n  const tableContainerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const [scrollBar, setScrollBar] = useState(false);\r\n\r\n  return (\r\n    <main\r\n      className={openHeader ? \"main employeeList\" : \"main employeeList close\"}\r\n      onClick={() => {\r\n        handleOpenNav(dispatch, true);\r\n      }}\r\n    >\r\n      <h1>List employees</h1>\r\n      <div className=\"employeeList__header\">\r\n        <div className=\"filter\">\r\n          <div className=\"filter__show\">\r\n            <label htmlFor=\"number_show\">Show</label>\r\n            <select\r\n              data-testid=\"number-show\"\r\n              className=\"number_show\"\r\n              name=\"number_show\"\r\n              value={table.getState().pagination.pageSize}\r\n              onChange={(e) => {\r\n                table.setPageSize(Number(e.target.value));\r\n                Number(e.target.value) > 10\r\n                  ? setScrollBar(true)\r\n                  : setScrollBar(false);\r\n              }}\r\n            >\r\n              {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                <option key={pageSize} value={pageSize}>\r\n                  {pageSize}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <DebouncedInput\r\n            value={globalFilter ?? \"\"}\r\n            onChange={(value) => setGlobalFilter(String(value))}\r\n            className=\"p-2 font-lg shadow border border-block searchBar\"\r\n            data-testid=\"searchBar\"\r\n            placeholder=\"Search\"\r\n          />\r\n          <i className=\"fab fa-sistrix searchBar__icon\"></i>\r\n        </div>\r\n      </div>\r\n      <div\r\n        ref={tableContainerRef}\r\n        className={scrollBar ? \"employees scrollBar\" : \"employees\"}\r\n      >\r\n        <table className=\"employees__table\">\r\n          <thead>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <tr key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <th key={header.id}>\r\n                    {header.isPlaceholder ? null : (\r\n                      <div\r\n                        {...{\r\n                          className: header.column.getCanSort()\r\n                            ? \"cursor-pointer select-none\"\r\n                            : \"\",\r\n                          onClick: header.column.getToggleSortingHandler(),\r\n                        }}\r\n                      >\r\n                        {flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                        {{\r\n                          asc: <i className=\"fas fa-chevron-down\"></i>,\r\n                          desc: <i className=\"fas fa-chevron-up\"></i>,\r\n                        }[header.column.getIsSorted() as string] ?? null}\r\n                      </div>\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <tr key={row.id}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <td key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n          <tfoot>\r\n            {table.getFooterGroups().map((footerGroup) => (\r\n              <tr key={footerGroup.id}>\r\n                {footerGroup.headers.map((header) => (\r\n                  <th key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.footer,\r\n                          header.getContext()\r\n                        )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n      <div className=\"pagination\">\r\n        <div className=\"pagination__buttons\" data-testid=\"pagination__buttons\">\r\n          <button\r\n            className=\"pagination__button\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            {\"<<\"}\r\n          </button>\r\n          <button\r\n            className=\"pagination__button\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            {\"<\"}\r\n          </button>\r\n          <button\r\n            data-testid=\"next\"\r\n            className=\"pagination__button\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            {\">\"}\r\n          </button>\r\n          <button\r\n            className=\"pagination__button\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            {\">>\"}\r\n          </button>\r\n        </div>\r\n        <span className=\"flex items-center gap-1 pagination__pageNumber\">\r\n          <p>Page : </p>\r\n          <strong>\r\n            {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n            {table.getPageCount()}\r\n          </strong>\r\n        </span>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"names":["initialValue","value","onChange","debounce","props","useState","setValue","useEffect","timeout","setTimeout","clearTimeout","e","target","fuzzyFilter","row","columnId","addMeta","itemRank","rankItem","getValue","passed","data","useAppSelector","state","users","columnHelper","createColumnHelper","columns","accessor","firstName","id","cell","info","header","lastName","startDay","departement","birthday","street","city","zipCode","sorting","setSorting","globalFilter","setGlobalFilter","dispatch","useAppDispatch","openHeader","reponsive","table","useReactTable","filterFns","fuzzy","onGlobalFilterChange","globalFilterFn","onSortingChange","getCoreRowModel","getSortedRowModel","getFilteredRowModel","getPaginationRowModel","debugTable","tableContainerRef","React","scrollBar","setScrollBar","className","onClick","handleOpenNav","htmlFor","name","getState","pagination","pageSize","setPageSize","Number","map","String","placeholder","ref","getHeaderGroups","headerGroup","headers","isPlaceholder","column","getCanSort","getToggleSortingHandler","flexRender","columnDef","getContext","asc","desc","getIsSorted","getRowModel","rows","getVisibleCells","getFooterGroups","footerGroup","footer","setPageIndex","disabled","getCanPreviousPage","previousPage","nextPage","getCanNextPage","getPageCount","pageIndex"],"sourceRoot":""}